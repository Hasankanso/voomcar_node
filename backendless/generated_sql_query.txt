USE voomcar;
SET foreign_key_checks = 0;

ALTER DATABASE
voomcar
CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;

DROP TABLE IF EXISTS alert;
DROP TABLE IF EXISTS blConfigurationItemDescription;
DROP TABLE IF EXISTS car;
DROP TABLE IF EXISTS countryInformation;
DROP TABLE IF EXISTS deviceRegistration;
DROP TABLE IF EXISTS driver;
DROP TABLE IF EXISTS location;
DROP TABLE IF EXISTS Loggers;
DROP TABLE IF EXISTS person;
DROP TABLE IF EXISTS rate;
DROP TABLE IF EXISTS reserve;
DROP TABLE IF EXISTS ride;
DROP TABLE IF EXISTS schedule;
DROP TABLE IF EXISTS scheduleRide;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS userStatistics;

CREATE TABLE IF NOT EXISTS alert (`leavingDate` DATETIME ,
`price` DOUBLE ,
`objectId` BINARY(16) NOT NULL PRIMARY KEY ,
`ownerId` BINARY(16) ,  FOREIGN KEY (`ownerId`) REFERENCES `users`(`objectId`),
`created` DATETIME ,
`updated` DATETIME ,
`from` BINARY(16) , FOREIGN KEY (`from`) REFERENCES `location`(`objectId`),
`passenger` BINARY(16) , FOREIGN KEY (`passenger`) REFERENCES `person`(`objectId`),
`to` BINARY(16) , FOREIGN KEY (`to`) REFERENCES `location`(`objectId`));

CREATE TABLE IF NOT EXISTS blConfigurationItemDescription (`defaultValue` NVARCHAR(250) ,
`displayName` NVARCHAR(250) ,
`hint` NVARCHAR(250) ,
`localServiceVersion` NVARCHAR(250) ,
`name` NVARCHAR(250) ,
`options` NVARCHAR(250) ,
`order` DOUBLE ,
`required` BOOLEAN ,
`type` NVARCHAR(250) ,
`objectId` BINARY(16) NOT NULL PRIMARY KEY ,
`ownerId` BINARY(16) ,  FOREIGN KEY (`ownerId`) REFERENCES `users`(`objectId`),
`created` DATETIME ,
`updated` DATETIME );

CREATE TABLE IF NOT EXISTS car (`brand` NVARCHAR(100) ,
`color` INT ,
`maxLuggage` INT ,
`maxSeats` INT ,
`name` NVARCHAR(100) ,
`picture` NVARCHAR(750) ,
`type` INT ,
`year` INT ,
`objectId` BINARY(16) NOT NULL PRIMARY KEY ,
`ownerId` BINARY(16) ,  FOREIGN KEY (`ownerId`) REFERENCES `users`(`objectId`),
`created` DATETIME ,
`updated` DATETIME ,
`driver` BINARY(16) , FOREIGN KEY (`driver`) REFERENCES `driver`(`objectId`));

CREATE TABLE IF NOT EXISTS countryInformation (`code` NVARCHAR(10) ,
`countryComponent` NVARCHAR(10) ,
`digits` INT ,
`drivingAge` INT ,
`maxPrice` DOUBLE ,
`minPrice` DOUBLE ,
`name` NVARCHAR(100) ,
`priceStep` DOUBLE ,
`rateStart` INT ,
`unit` NVARCHAR(50) ,
 INDEX (`unit`),
`objectId` BINARY(16) NOT NULL PRIMARY KEY ,
`ownerId` BINARY(16) ,  FOREIGN KEY (`ownerId`) REFERENCES `users`(`objectId`),
`created` DATETIME ,
`updated` DATETIME );

CREATE TABLE IF NOT EXISTS deviceRegistration (`channelName` NVARCHAR(45)  NOT NULL,
`deviceId` NVARCHAR(45)  NOT NULL,
`deviceToken` NVARCHAR(256)  NOT NULL,
`expiration` DATETIME ,
`operatingSystemName` NVARCHAR(15)  NOT NULL,
`operatingSystemVersion` NVARCHAR(45) ,
`objectId` BINARY(16) NOT NULL PRIMARY KEY ,
`ownerId` BINARY(16) ,  FOREIGN KEY (`ownerId`) REFERENCES `users`(`objectId`),
`created` DATETIME ,
`updated` DATETIME ,
`user` BINARY(16) , FOREIGN KEY (`user`) REFERENCES `Users`(`objectId`));

CREATE TABLE IF NOT EXISTS driver (`objectId` BINARY(16) NOT NULL PRIMARY KEY ,
`ownerId` BINARY(16) ,  FOREIGN KEY (`ownerId`) REFERENCES `users`(`objectId`),
`created` DATETIME ,
`updated` DATETIME ,
`person` BINARY(16) , FOREIGN KEY (`person`) REFERENCES `person`(`objectId`),
`region1` BINARY(16) , FOREIGN KEY (`region1`) REFERENCES `location`(`objectId`),
`region2` BINARY(16) , FOREIGN KEY (`region2`) REFERENCES `location`(`objectId`),
`region3` BINARY(16) , FOREIGN KEY (`region3`) REFERENCES `location`(`objectId`));

CREATE TABLE IF NOT EXISTS location (`name` NVARCHAR(500) ,
`placeId` NVARCHAR(250)  UNIQUE,
 INDEX (`placeId`),
`position` GEOMETRY ,
`objectId` BINARY(16) NOT NULL PRIMARY KEY ,
`ownerId` BINARY(16) ,  FOREIGN KEY (`ownerId`) REFERENCES `users`(`objectId`),
`created` DATETIME ,
`updated` DATETIME );

CREATE TABLE IF NOT EXISTS Loggers (`level` NVARCHAR(250)  NOT NULL,
`logFormat` NVARCHAR(250)  NOT NULL,
`name` NVARCHAR(250)  NOT NULL,
`policy` NVARCHAR(250)  NOT NULL,
`objectId` BINARY(16) NOT NULL PRIMARY KEY ,
`ownerId` BINARY(16) ,  FOREIGN KEY (`ownerId`) REFERENCES `users`(`objectId`),
`created` DATETIME ,
`updated` DATETIME );

CREATE TABLE IF NOT EXISTS person (`bio` NVARCHAR(500) ,
`birthday` DATETIME ,
`chattiness` INT ,
`firstName` NVARCHAR(100) ,
`gender` BOOLEAN ,
`image` NVARCHAR(750) ,
`lastName` NVARCHAR(100) ,
`token` NVARCHAR(500) ,
`objectId` BINARY(16) NOT NULL PRIMARY KEY ,
`ownerId` BINARY(16) ,  FOREIGN KEY (`ownerId`) REFERENCES `users`(`objectId`),
`created` DATETIME ,
`updated` DATETIME ,
`countryInformations` BINARY(16) , FOREIGN KEY (`countryInformations`) REFERENCES `countryInformation`(`objectId`),
`statistics` BINARY(16)  UNIQUE, FOREIGN KEY (`statistics`) REFERENCES `userStatistics`(`objectId`));

CREATE TABLE IF NOT EXISTS rate (`comment` NVARCHAR(500) ,
`grade` DOUBLE  NOT NULL,
`reason` INT ,
`objectId` BINARY(16) NOT NULL PRIMARY KEY ,
`ownerId` BINARY(16) ,  FOREIGN KEY (`ownerId`) REFERENCES `users`(`objectId`),
`created` DATETIME ,
`updated` DATETIME ,
`rater` BINARY(16) , FOREIGN KEY (`rater`) REFERENCES `person`(`objectId`),
`ride` BINARY(16) , FOREIGN KEY (`ride`) REFERENCES `ride`(`objectId`),
`target` BINARY(16) , FOREIGN KEY (`target`) REFERENCES `person`(`objectId`));

CREATE TABLE IF NOT EXISTS reserve (`luggages` INT ,
`seats` INT ,
`status` NVARCHAR(100) ,
`objectId` BINARY(16) NOT NULL PRIMARY KEY ,
`ownerId` BINARY(16) ,  FOREIGN KEY (`ownerId`) REFERENCES `users`(`objectId`),
`created` DATETIME ,
`updated` DATETIME ,
`person` BINARY(16) , FOREIGN KEY (`person`) REFERENCES `person`(`objectId`),
`ride` BINARY(16) , FOREIGN KEY (`ride`) REFERENCES `ride`(`objectId`));

CREATE TABLE IF NOT EXISTS ride (`acAllowed` BOOLEAN ,
`availableLuggages` INT ,
`availableSeats` INT ,
`comment` NVARCHAR(400) ,
`kidSeat` BOOLEAN ,
`leavingDate` DATETIME ,
`map` NVARCHAR(750) ,
`maxLuggages` INT ,
`maxSeats` INT ,
`musicAllowed` BOOLEAN ,
`petsAllowed` BOOLEAN ,
`price` DOUBLE ,
`smokingAllowed` BOOLEAN ,
`status` NVARCHAR(100) ,
`stopTime` INT ,
`objectId` BINARY(16) NOT NULL PRIMARY KEY ,
`ownerId` BINARY(16) ,  FOREIGN KEY (`ownerId`) REFERENCES `users`(`objectId`),
`created` DATETIME ,
`updated` DATETIME ,
`car` BINARY(16) , FOREIGN KEY (`car`) REFERENCES `car`(`objectId`),
`driver` BINARY(16) , FOREIGN KEY (`driver`) REFERENCES `driver`(`objectId`),
`from` BINARY(16) , FOREIGN KEY (`from`) REFERENCES `location`(`objectId`),
`to` BINARY(16) , FOREIGN KEY (`to`) REFERENCES `location`(`objectId`));

CREATE TABLE IF NOT EXISTS schedule (`endDate` DATETIME ,
`friday` BOOLEAN ,
`monday` BOOLEAN ,
`saturday` BOOLEAN ,
`startDate` DATETIME ,
`sunday` BOOLEAN ,
`thursday` BOOLEAN ,
`tuesday` BOOLEAN ,
`wednesday` BOOLEAN ,
`objectId` BINARY(16) NOT NULL PRIMARY KEY ,
`ownerId` BINARY(16) ,  FOREIGN KEY (`ownerId`) REFERENCES `users`(`objectId`),
`created` DATETIME ,
`updated` DATETIME );

CREATE TABLE IF NOT EXISTS scheduleRide (`objectId` BINARY(16) NOT NULL PRIMARY KEY ,
`ownerId` BINARY(16) ,  FOREIGN KEY (`ownerId`) REFERENCES `users`(`objectId`),
`created` DATETIME ,
`updated` DATETIME ,
`driver` BINARY(16) , FOREIGN KEY (`driver`) REFERENCES `driver`(`objectId`),
`schedule` BINARY(16) , FOREIGN KEY (`schedule`) REFERENCES `schedule`(`objectId`));

CREATE TABLE IF NOT EXISTS users (`blUserLocale` NVARCHAR(250)  NOT NULL,
`email` NVARCHAR(100)  NOT NULL,
 INDEX (`email`),
`oAuthIdentities` JSON ,
`password` NVARCHAR(250)  NOT NULL,
`phone` NVARCHAR(100)  NOT NULL UNIQUE,
 INDEX (`phone`),
`verificationCode` NVARCHAR(100) ,
`objectId` BINARY(16) NOT NULL PRIMARY KEY ,
`ownerId` BINARY(16) ,  FOREIGN KEY (`ownerId`) REFERENCES `users`(`objectId`),
`created` DATETIME ,
`updated` DATETIME ,
`person` BINARY(16) , FOREIGN KEY (`person`) REFERENCES `person`(`objectId`),
`bckls__userStatusId` INT ,
`bckls__lastLogin` DATETIME );

CREATE TABLE IF NOT EXISTS userStatistics (`acomplishedRides` INT  NOT NULL,
`canceledRides` INT  NOT NULL,
`fives` INT ,
`fours` INT ,
`ones` INT ,
`rateAverage` DOUBLE ,
`ratesCount` INT  NOT NULL,
`threes` INT ,
`twos` INT ,
`objectId` BINARY(16) NOT NULL PRIMARY KEY ,
`ownerId` BINARY(16) ,  FOREIGN KEY (`ownerId`) REFERENCES `users`(`objectId`),
`created` DATETIME ,
`updated` DATETIME );